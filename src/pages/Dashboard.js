import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { useNavigate } from "react-router-dom"; // üëà –∏–º–ø–æ—Ä—Ç
import AddTransaction from "../components/AddTransaction";
import EditTransactionForm from "../components/EditTransactionForm";
import { fetchTransactions, deleteTransaction } from "../redux/slices/transactionSlice";
import { fetchCategories } from "../redux/slices/categorySlice";
import { logout } from "../redux/slices/authSlice";

function Dashboard() {
  const user = useSelector((state) => state.auth.user);
  const transactions = useSelector((state) => state.transactions.list || []);
  const categories = useSelector((state) => state.categories.items || []);
  const dispatch = useDispatch();
  const navigate = useNavigate(); // üëà –Ω–∞–≤–∏–≥–∞—Ü–∏—è

  useEffect(() => {
    dispatch(fetchTransactions());
    dispatch(fetchCategories());
  }, [dispatch]);

  const totalBalance = transactions.reduce((acc, tx) =>
    tx.type === "income" ? acc + tx.amount : acc - tx.amount, 0
  );

  const [editingTx, setEditingTx] = useState(null);
  const [filterType, setFilterType] = useState("all");

  const handleDelete = (id) => {
    if (window.confirm("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?")) {
      dispatch(deleteTransaction(id));
    }
  };

  const handleLogout = () => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?")) {
      dispatch(logout());
      navigate("/login"); // üëà —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
    }
  };

  const getCategoryStyle = (categoryName) => {
    const cat = categories.find((c) => c.name === categoryName);
    return { color: cat?.color || "#000" };
  };

  const filteredTransactions = [...transactions]
    .filter((tx) => filterType === "all" || tx.type === filterType)
    .sort((a, b) => new Date(b.date) - new Date(a.date))
    .slice(0, 10);

  return (
    <div>
      <h2>
        –ü—Ä–∏–≤–µ—Ç, {user}!{" "}
        <button onClick={handleLogout} style={{ marginLeft: "10px" }}>
          –í—ã–π—Ç–∏
        </button>
      </h2>
      <h3>–ë–∞–ª–∞–Ω—Å: {totalBalance.toFixed(2)} ‚Ç∏</h3>

      <AddTransaction />

      <label>
        –ü–æ–∫–∞–∑–∞—Ç—å:
        <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>
          <option value="all">–í—Å–µ</option>
          <option value="income">–¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã</option>
          <option value="expense">–¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã</option>
        </select>
      </label>

      <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</h3>
      <ul>
  {filteredTransactions.map((tx) => (
    <li key={tx.id}>
      [{tx.date}]{" "}
      <span style={getCategoryStyle(tx.category)}>{tx.category}</span>:{" "}
      {tx.type === "income" ? "+" : "-"}
      {tx.amount} ‚Ç∏
      <button onClick={() => setEditingTx(tx)}>‚úèÔ∏è</button>
      <button onClick={() => handleDelete(tx.id)}>üóë</button>

      {/* üëá –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è —ç—Ç–æ—Ç tx ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É */}
      {editingTx?.id === tx.id && (
        <EditTransactionForm
          transaction={editingTx}
          onClose={() => setEditingTx(null)}
        />
      )}
    </li>
  ))}
</ul>

    </div>
  );
}

export default Dashboard;
