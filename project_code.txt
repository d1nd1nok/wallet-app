# PROJECT CODE COMPILATION
# Generated on 05/05/2025 21:33:15
# Source: C:\Users\Dilna_i3vrnsx\wallet-app


###############################################################################
# FILE: api.js
###############################################################################

import axios from "axios";

const api = axios.create({
  baseURL: "http://localhost:3001",
});

export default api;


###############################################################################
# FILE: db.json
###############################################################################

{
    "users": [],
    "transactions": [],
    "categories": [
      {
        "id": 1,
        "name": "Продукты",
        "type": "expense",
        "icon": "🛒",
        "color": "#ff6384"
      },
      {
        "id": 2,
        "name": "Зарплата",
        "type": "income",
        "icon": "💼",
        "color": "#36a2eb"
      }
    ]
  }
  

###############################################################################
# FILE: get_project_code.bat
###############################################################################

@echo off
echo Running code collection script...
powershell.exe -ExecutionPolicy Bypass -File "%~dp0CollectCode.ps1"

###############################################################################
# FILE: package.json
###############################################################################

{
  "name": "wallet-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@reduxjs/toolkit": "^2.7.0",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.9.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.5.3",
    "react-scripts": "5.0.1",
    "recharts": "^2.15.3",
    "redux": "^5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


###############################################################################
# FILE: README.md
###############################################################################

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


###############################################################################
# FILE: public\index.html
###############################################################################

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


###############################################################################
# FILE: public\manifest.json
###############################################################################

{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


###############################################################################
# FILE: public\robots.txt
###############################################################################

# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


###############################################################################
# FILE: src\App.css
###############################################################################

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


###############################################################################
# FILE: src\App.js
###############################################################################

import React from "react";
import { Routes, Route, Navigate } from "react-router-dom";
import Login from "./pages/Login";
import Register from "./pages/Register";
import Dashboard from "./pages/Dashboard";
import Stats from "./pages/Stats";
import PrivateRoute from "./components/PrivateRoute";
import CategorySettings from "./pages/CategorySettings";

function App() {
  return (
    <Routes>
      <Route path="/login" element={<Login />} />
      <Route path="/register" element={<Register />} />

      <Route
        path="/dashboard"
        element={
          <PrivateRoute>
            <Dashboard />
          </PrivateRoute>
        }
      />
      <Route
        path="/stats"
        element={
          <PrivateRoute>
            <Stats />
          </PrivateRoute>
        }
      />
      <Route
        path="/settings"
        element={
          <PrivateRoute>
            <CategorySettings />
          </PrivateRoute>
        }
      />

      <Route path="*" element={<Navigate to="/login" />} />
      <Route path="/stats" element={<Stats />} />
      <Route path="/settings" element={<CategorySettings />} />

    </Routes>
  );
}
export default App;


###############################################################################
# FILE: src\App.test.js
###############################################################################

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


###############################################################################
# FILE: src\index.css
###############################################################################

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


###############################################################################
# FILE: src\index.js
###############################################################################

import React from "react";
import ReactDOM from "react-dom/client";
import { Provider } from "react-redux";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import store from "./redux/store";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <Provider store={store}>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </Provider>
);


###############################################################################
# FILE: src\reportWebVitals.js
###############################################################################

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


###############################################################################
# FILE: src\setupTests.js
###############################################################################

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


###############################################################################
# FILE: src\components\AddTransaction.js
###############################################################################

import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { addTransaction } from "../redux/slices/transactionSlice";
import { fetchCategories } from "../redux/slices/categorySlice";
const AddTransaction = () => {
  const dispatch = useDispatch();
  const categories = useSelector((state) => state.categories.items);
  const [type, setType] = useState("income");
  const [amount, setAmount] = useState("");
  const [category, setCategory] = useState("");
  const [date, setDate] = useState("");

  useEffect(() => {
    dispatch(fetchCategories());
  }, [dispatch]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!amount || !category || !date) return;

    const transaction = {
      type,
      amount: parseFloat(amount),
      category,
      date,
    };

    dispatch(addTransaction(transaction));
    setAmount("");
    setCategory("");
    setDate("");
  };

  return (
    <form onSubmit={handleSubmit}>
      <h4>Добавить транзакцию</h4>

      <select name="type" value={type} onChange={(e) => setType(e.target.value)}>
        <option value="income">Доход</option>
        <option value="expense">Расход</option>
      </select>
      <br />

      <input
        type="number"
        placeholder="Сумма"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        required
      />
      <br />

      <select
        name="category"
        value={category}
        onChange={(e) => setCategory(e.target.value)}
        required
      >
        <option value="">Выберите категорию</option>
        {categories.map((cat) => (
          <option key={cat.id} value={cat.name}>
            {cat.icon} {cat.name}
          </option>
        ))}
      </select>
      <br />

      <input
        type="date"
        value={date}
        onChange={(e) => setDate(e.target.value)}
        required
      />
      <br />

      <button type="submit">Добавить транзакцию</button>
    </form>
  );
};

export default AddTransaction;


###############################################################################
# FILE: src\components\EditTransactionForm.js
###############################################################################

import React, { useState } from "react";
import { useDispatch } from "react-redux";
import transactionReducer, {
    fetchTransactions,
    addTransaction,
    deleteTransaction,
    updateTransaction,
  } from "../redux/slices/transactionSlice";

const EditTransactionForm = ({ transaction, onClose }) => {
  const [formData, setFormData] = useState(transaction);
  const dispatch = useDispatch();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(updateTransaction(formData));
    onClose();
  };

  return (
    <form onSubmit={handleSubmit}>
      <h4>Редактировать</h4>
      <select name="type" value={formData.type} onChange={handleChange}>
        <option value="income">Доход</option>
        <option value="expense">Расход</option>
      </select><br />

      <input
        name="amount"
        type="number"
        value={formData.amount}
        onChange={handleChange}
        required
      /><br />

      <input
        name="category"
        type="text"
        value={formData.category}
        onChange={handleChange}
        required
      /><br />

      <input
        name="date"
        type="date"
        value={formData.date}
        onChange={handleChange}
        required
      /><br />

      <button type="submit">Сохранить</button>
      <button type="button" onClick={onClose}>Отмена</button>
    </form>
  );
};

export default EditTransactionForm;


###############################################################################
# FILE: src\components\PrivateRoute.js
###############################################################################

import React from "react";
import { useSelector } from "react-redux";
import { Navigate } from "react-router-dom";

const PrivateRoute = ({ children }) => {
  const isAuthenticated = useSelector((state) => state.auth.isAuthenticated);

  return isAuthenticated ? children : <Navigate to="/login" />;
};

export default PrivateRoute;


###############################################################################
# FILE: src\pages\CategorySettings.js
###############################################################################

import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchCategories,
  addCategory,
  deleteCategory,
} from "../redux/slices/categorySlice";

const CategorySettings = () => {
  const dispatch = useDispatch();
  const categories = useSelector((state) => state.categories.items);
  const [name, setName] = useState("");
  const [icon, setIcon] = useState("📁");
  const [color, setColor] = useState("#3498db");

  useEffect(() => {
    dispatch(fetchCategories());
  }, [dispatch]);

  const handleAdd = (e) => {
    e.preventDefault();
    if (!name.trim()) return;

    dispatch(addCategory({ name, icon, color }));
    setName("");
  };

  const handleDelete = (id) => {
    if (window.confirm("Удалить категорию?")) {
      dispatch(deleteCategory(id));
    }
  };

  return (
    <div>
      <h2>Категории</h2>

      <form onSubmit={handleAdd}>
        <input
          type="text"
          placeholder="Название категории"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
        />
        <input type="text" value={icon} onChange={(e) => setIcon(e.target.value)} maxLength={2} />
        <input type="color" value={color} onChange={(e) => setColor(e.target.value)} />
        <button type="submit">Добавить</button>
      </form>

      <ul>
        {categories.map((cat) => (
          <li key={cat.id} style={{ color: cat.color }}>
            {cat.icon} {cat.name}
            <button onClick={() => handleDelete(cat.id)}>🗑</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default CategorySettings;


###############################################################################
# FILE: src\pages\Dashboard.js
###############################################################################

import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import {
    fetchTransactions,
    deleteTransaction
  } from "../redux/slices/transactionSlice";
import AddTransaction from "../components/AddTransaction";
import EditTransactionForm from "../components/EditTransactionForm";



function Dashboard() {
  const user = useSelector((state) => state.auth.user);
  const transactions = useSelector((state) => state.transactions.items);
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(fetchTransactions());
  }, [dispatch]);

  const totalBalance = transactions.reduce((acc, tx) =>
    tx.type === "income"
      ? acc + tx.amount
      : acc - tx.amount, 0
  );

const [editingTx, setEditingTx] = useState(null);

const handleDelete = (id) => {
  if (window.confirm("Удалить транзакцию?")) {
    dispatch(deleteTransaction(id));
  }
};

return (
  <div>
    <h2>Привет, {user}!</h2>
    <h3>Баланс: {totalBalance.toFixed(2)} ₸</h3>

    <AddTransaction />

    <h3>Последние транзакции:</h3>
    <ul>
      {transactions.map((tx) => (
        <li key={tx.id}>
          [{tx.date}] {tx.category}: {tx.type === "income" ? "+" : "-"}{tx.amount} ₸
          <button onClick={() => setEditingTx(tx)}>✏️</button>
          <button onClick={() => handleDelete(tx.id)}>🗑</button>
        </li>
      ))}
    </ul>

    {editingTx && (
      <EditTransactionForm
        transaction={editingTx}
        onClose={() => setEditingTx(null)}
      />
    )}
  </div>
);
}

export default Dashboard;


###############################################################################
# FILE: src\pages\Login.js
###############################################################################

import React, { useState } from "react";
import { useDispatch } from "react-redux";
import { loginSuccess } from "../redux/slices/authSlice";
import { useNavigate } from "react-router-dom";

function Login() {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleLogin = async (e) => {
    e.preventDefault();

    // Пример: запрос к фейковому серверу (позже можно заменить на axios)
    const fakeUser = {
      email,
      token: "mock-token-12345",
    };

    // Сохраняем в Redux и localStorage
    dispatch(loginSuccess({ user: email, token: fakeUser.token }));
    localStorage.setItem("token", fakeUser.token);
    localStorage.setItem("user", email);

    navigate("/dashboard");
  };

  return (
    <div>
      <h2>Вход</h2>
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          required
          onChange={(e) => setEmail(e.target.value)}
        /><br />
        <input
          type="password"
          placeholder="Пароль"
          value={password}
          required
          onChange={(e) => setPassword(e.target.value)}
        /><br />
        <button type="submit">Войти</button>
      </form>
    </div>
  );
}

export default Login;


###############################################################################
# FILE: src\pages\Register.js
###############################################################################

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

function Register() {
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleRegister = async (e) => {
    e.preventDefault();

    // Здесь должен быть POST-запрос на json-server (пока эмулируем)
    console.log("Зарегистрирован:", { email, password });

    // После регистрации редирект на /login
    navigate("/login");
  };

  return (
    <div>
      <h2>Регистрация</h2>
      <form onSubmit={handleRegister}>
        <input
          type="email"
          placeholder="Email"
          required
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        /><br />
        <input
          type="password"
          placeholder="Пароль"
          required
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        /><br />
        <button type="submit">Зарегистрироваться</button>
      </form>
    </div>
  );
}

export default Register;


###############################################################################
# FILE: src\pages\Stats.js
###############################################################################

import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import transactionReducer, {
    fetchTransactions,
    addTransaction,
    deleteTransaction,
    updateTransaction,
  } from "../redux/slices/transactionSlice";
import {
  PieChart, Pie, Cell, Tooltip, BarChart, Bar, XAxis, YAxis, CartesianGrid, Legend,
} from "recharts";

const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff6384", "#36a2eb", "#ff9f40"];

const Stats = () => {
  const dispatch = useDispatch();
  const transactions = useSelector((state) => state.transactions.items);
  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");

  useEffect(() => {
    dispatch(fetchTransactions());
  }, [dispatch]);

  // Фильтрация по дате
  const filtered = transactions.filter((tx) => {
    const txDate = new Date(tx.date);
    return (!fromDate || new Date(fromDate) <= txDate) &&
           (!toDate || txDate <= new Date(toDate));
  });

  // Группировка по категории
  const groupByCategory = (type) => {
    const grouped = {};
    filtered
      .filter((tx) => tx.type === type)
      .forEach((tx) => {
        grouped[tx.category] = (grouped[tx.category] || 0) + tx.amount;
      });
    return Object.entries(grouped).map(([category, value], index) => ({
      name: category,
      value,
      color: COLORS[index % COLORS.length],
    }));
  };

  const incomeData = groupByCategory("income");
  const expenseData = groupByCategory("expense");

  return (
    <div>
      <h2>Статистика</h2>

      <label>От: </label>
      <input type="date" value={fromDate} onChange={(e) => setFromDate(e.target.value)} />
      <label> До: </label>
      <input type="date" value={toDate} onChange={(e) => setToDate(e.target.value)} />

      <h3>Доходы (PieChart)</h3>
      <PieChart width={400} height={300}>
        <Pie
          data={incomeData}
          dataKey="value"
          nameKey="name"
          cx="50%" cy="50%"
          outerRadius={100}
          label
        >
          {incomeData.map((entry, index) => (
            <Cell key={index} fill={entry.color} />
          ))}
        </Pie>
        <Tooltip />
      </PieChart>

      <h3>Расходы (BarChart)</h3>
      <BarChart width={500} height={300} data={expenseData}>
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="name" />
        <YAxis />
        <Tooltip />
        <Legend />
        <Bar dataKey="value" fill="#ff6384" name="Расходы" />
      </BarChart>
    </div>
  );
};

export default Stats;


###############################################################################
# FILE: src\redux\store.js
###############################################################################

import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./slices/authSlice";
import categoriesReducer from "./slices/categorySlice";
import transactionsReducer from "./slices/transactionSlice"; 

const store = configureStore({
  reducer: {
    auth: authReducer,
    categories: categoriesReducer,
    transactions: transactionsReducer, 
  },
});

export default store;


###############################################################################
# FILE: src\redux\slices\authSlice.js
###############################################################################

import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  user: null,
  token: null,
  isAuthenticated: false,
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    loginSuccess: (state, action) => {
      state.user = action.payload.user;
      state.token = action.payload.token;
      state.isAuthenticated = true;
    },
    logout: (state) => {
      state.user = null;
      state.token = null;
      state.isAuthenticated = false;
    },
  },
});

export const { loginSuccess, logout } = authSlice.actions;
export default authSlice.reducer;


###############################################################################
# FILE: src\redux\slices\categorySlice.js
###############################################################################

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import api from "../../api";

export const fetchCategories = createAsyncThunk("categories/fetch", async () => {
  const res = await api.get("/categories");
  return res.data;
});

export const addCategory = createAsyncThunk("categories/add", async (category) => {
  const res = await api.post("/categories", category);
  return res.data;
});

export const deleteCategory = createAsyncThunk("categories/delete", async (id) => {
  await api.delete(`/categories/${id}`);
  return id;
});

const categorySlice = createSlice({
  name: "categories",
  initialState: {
    items: [],
    status: "idle",
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchCategories.fulfilled, (state, action) => {
        state.items = action.payload;
      })
      .addCase(addCategory.fulfilled, (state, action) => {
        state.items.push(action.payload);
      })
      .addCase(deleteCategory.fulfilled, (state, action) => {
        state.items = state.items.filter((cat) => cat.id !== action.payload);
      });
  },
});

export default categorySlice.reducer;


###############################################################################
# SUMMARY
# Total files: 26
# Total size: 25.29 KB
# Processing time: 0.9 seconds
###############################################################################
